const config = {
  // Bot Owner, level 10 by default. A User ID. Should never be anything else than the bot owner's ID.
  "ownerID": "",

  // Bot Admins, level 9 by default. Array of user ID strings.
  "admins": ["",""],

  // Bot Support, level 8 by default. Array of user ID strings
  "support": [],

  // Bot's Token.
  "token": "",

  // Steam API token
  "steamtoken": "",

  // Backpack.TF API token
  "backpackTFkey": "",

  // Top.GG token for bot listing on their website
  "topgg" : "",

  // Hook ID and token for logging webhook
  "webhookLogger":["",""],

  "dashboard" : {
    "oauthSecret": "",
    "callbackURL": "",
    "sessionSecret": "",
    "domain": "",
    "port": 8080
  },



  // PERMISSION LEVEL DEFINITIONS.
  permLevels: [
    {
      level: 0,
      name: "User",
      check: () => true
    },

    {
      level: 2,
      name: "Moderator",
      check: (message) => {
        try {
          const modRole = message.guild.roles.find(r => r.name.toLowerCase() === message.settings.modRole.toLowerCase());
          if (modRole && message.member.roles.has(modRole.id)) return true;
        } catch (e) {
          return false;
        }
      }
    },

    {
      level: 3,
      name: "Administrator",
      check: (message) => {
        try {
          const adminRole = message.guild.roles.find(r => r.name.toLowerCase() === message.settings.adminRole.toLowerCase());
          return (adminRole && message.member.roles.has(adminRole.id));
        } catch (e) {
          return false;
        }
      }
    },

    {
      level: 4,
      name: "Server Owner",
      check: (message) => message.channel.type === "text" ? (message.guild.ownerID === message.author.id ? true : false) : false
    },

    {
      level: 8,
      name: "Bot Support",
      check: (message) => config.support.includes(message.author.id)
    },

    {
      level: 9,
      name: "Bot Admin",
      check: (message) => config.admins.includes(message.author.id)
    },

    {
      level: 10,
      name: "Bot Owner",
      check: (message) => config.ownerID.includes(message.author.id)
    }
  ]
};

module.exports = config;
